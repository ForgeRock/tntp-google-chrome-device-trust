{
    "name": "Redirect Route",
    "baseURI" : "http://127.0.0.1:8080",
    "condition": "${find(request.uri.path, '^/challengeresponse')}",
    "handler": "Chain",
    "heap": [
      {
        "type": "BaseUriDecorator",
        "name": "baseUri"
      },
      {
        "type": "TimerDecorator",
        "name": "timer",
        "config": {
          "timeUnit": "ms"
        }
      },
      {
        "type": "CaptureDecorator",
        "name": "capture",
        "config": {
          "captureEntity": false,
          "captureContext": false,
          "maxEntityLength": 524288
        }
      },
      {
        "name": "Chain",
        "type": "Chain",
        "config": {
          "handler": "Redirect-Back-To-Identity-Cloud",
          "filters": [ "AddChallengeResponse" ]
        }
      },
      {
        "type": "ScriptableFilter",
        "name": "AddChallengeResponse",
        "config": {
          "type": "application/x-groovy",
          "source": [
            "import java.net.URLEncoder;",
            "",
            "response = new Response(Status.OK);",
            "",
            "def challengeResponseRaw = request.headers[\"x-verified-access-challenge-response\"].values[0];",
            "logger.warn('Challenge response raw:'+challengeResponseRaw);",
            "",
            "if (request.headers.containsKey('x-verified-access-challenge-response')) {",
            "logger.warn('Challenge response found');",
            "   def challengeResponse = challengeResponseRaw.substring(22,challengeResponseRaw.length()-2)",
            "logger.warn(challengeResponse);",
            "   attributes.challengeResponseEncoded = URLEncoder.encode(challengeResponse, 'UTF-8');",
            "logger.warn(attributes.challengeResponseEncoded);",
            "}",
            "return next.handle(context, request).thenOnResult { response ->logger.info('We are done encoding')};"
          ]
        }
      },
      {
        "type": "StaticResponseHandler",
        "name": "Redirect-Back-To-Identity-Cloud",
        "config": {
          "status": 302,
          "reason": "Found",
          "headers": {
            "location": [
              "http://tap-forgerock-am.ping-devops.com:8080/openam/XUI/?realm=/&service=devicetrust&challengeresponse=${attributes.challengeResponseEncoded}"
            ]
          }
        }
      }
    ]
  }
  